const{contextBridge,ipcRenderer}=require("electron");contextBridge.exposeInMainWorld("electron",{getAssetPath:e=>ipcRenderer.invoke("app:getAssetPath",e),openExternal:e=>ipcRenderer.invoke("shell:openExternal",e)}),contextBridge.exposeInMainWorld("electronAPI",{auth:{login:()=>ipcRenderer.invoke("auth:login"),logout:()=>ipcRenderer.invoke("auth:logout"),getToken:()=>ipcRenderer.invoke("auth:getToken"),getCurrentUser:()=>ipcRenderer.invoke("auth:getCurrentUser"),getIdTokenClaims:()=>ipcRenderer.invoke("auth:getIdTokenClaims"),requestPermissions:e=>ipcRenderer.invoke("auth:requestPermissions",e),getTokenWithPermissions:e=>ipcRenderer.invoke("auth:getTokenWithPermissions",e),getAuthenticationInfo:()=>ipcRenderer.invoke("auth:getAuthenticationInfo"),getTokenPermissions:()=>ipcRenderer.invoke("auth:getTokenPermissions"),getCurrentGraphPermissions:()=>ipcRenderer.invoke("auth:getCurrentGraphPermissions"),getTenantInfo:()=>ipcRenderer.invoke("auth:getTenantInfo"),clearTokenCache:()=>ipcRenderer.invoke("auth:clearTokenCache"),forceReauthentication:()=>ipcRenderer.invoke("auth:forceReauthentication"),testConfiguration:e=>ipcRenderer.invoke("auth:testConfiguration",e)},graph:{query:(e,n,i)=>ipcRenderer.invoke("graph:query",e,n,i),getUserPhoto:e=>ipcRenderer.invoke("graph:getUserPhoto",e),clearPhotoCache:()=>ipcRenderer.invoke("graph:clearPhotoCache"),clearUserPhotoCache:e=>ipcRenderer.invoke("graph:clearUserPhotoCache",e),getPhotoCacheStats:()=>ipcRenderer.invoke("graph:getPhotoCacheStats")},llm:{chat:(e,n)=>ipcRenderer.invoke("llm:chat",e,n),isAvailable:()=>ipcRenderer.invoke("llm:isAvailable"),isLocalAvailable:()=>ipcRenderer.invoke("llm:isLocalAvailable"),testConnection:e=>ipcRenderer.invoke("llm:testConnection",e),getAvailableModels:e=>ipcRenderer.invoke("llm:getAvailableModels",e),testProviderConnection:(e,n)=>ipcRenderer.invoke("llm:testProviderConnection",e,n),getProviderModels:(e,n)=>ipcRenderer.invoke("llm:getProviderModels",e,n)},mcp:{call:(e,n,i)=>ipcRenderer.invoke("mcp:call",e,n,i),listServers:()=>ipcRenderer.invoke("mcp:listServers"),listTools:e=>ipcRenderer.invoke("mcp:listTools",e),restartLokkaMCPServer:()=>ipcRenderer.invoke("mcp:restartLokkaMCPServer")},msp:{getTenantContext:()=>ipcRenderer.invoke("msp:getTenantContext"),getAvailableTenants:()=>ipcRenderer.invoke("msp:getAvailableTenants"),switchTenant:e=>ipcRenderer.invoke("msp:switchTenant",e),addTenant:e=>ipcRenderer.invoke("msp:addTenant",e),removeTenant:e=>ipcRenderer.invoke("msp:removeTenant",e),getDashboardMetrics:()=>ipcRenderer.invoke("msp:getDashboardMetrics"),refreshTenantHealth:()=>ipcRenderer.invoke("msp:refreshTenantHealth"),updateTenant:(e,n)=>ipcRenderer.invoke("msp:updateTenant",e,n),enableMSPMode:()=>ipcRenderer.invoke("msp:enableMSPMode"),disableMSPMode:()=>ipcRenderer.invoke("msp:disableMSPMode"),isMSPModeEnabled:()=>ipcRenderer.invoke("msp:isMSPModeEnabled")},adminTemplates:{getTemplates:()=>ipcRenderer.invoke("adminTemplates:getTemplates"),getTemplate:e=>ipcRenderer.invoke("adminTemplates:getTemplate",e),getTemplatesByCategory:e=>ipcRenderer.invoke("adminTemplates:getTemplatesByCategory",e),searchTemplates:e=>ipcRenderer.invoke("adminTemplates:searchTemplates",e),executeTemplate:(e,n)=>ipcRenderer.invoke("adminTemplates:executeTemplate",e,n),addCustomTemplate:e=>ipcRenderer.invoke("adminTemplates:addCustomTemplate",e),removeTemplate:e=>ipcRenderer.invoke("adminTemplates:removeTemplate",e),getExecutionHistory:()=>ipcRenderer.invoke("adminTemplates:getExecutionHistory"),exportTemplate:(e,n)=>ipcRenderer.invoke("adminTemplates:exportTemplate",e,n),scheduleTemplate:(e,n)=>ipcRenderer.invoke("adminTemplates:scheduleTemplate",e,n),getScheduledTemplates:()=>ipcRenderer.invoke("adminTemplates:getScheduledTemplates")},reporting:{getReportTemplates:()=>ipcRenderer.invoke("reporting:getReportTemplates"),getReportTemplate:e=>ipcRenderer.invoke("reporting:getReportTemplate",e),getReportsByCategory:e=>ipcRenderer.invoke("reporting:getReportsByCategory",e),searchReports:e=>ipcRenderer.invoke("reporting:searchReports",e),generateReport:(e,n,i,r)=>ipcRenderer.invoke("reporting:generateReport",e,n,i,r),getReportHistory:()=>ipcRenderer.invoke("reporting:getReportHistory"),getReportResult:e=>ipcRenderer.invoke("reporting:getReportResult",e),deleteReport:e=>ipcRenderer.invoke("reporting:deleteReport",e),downloadReport:e=>ipcRenderer.invoke("reporting:downloadReport",e),addCustomReport:e=>ipcRenderer.invoke("reporting:addCustomReport",e),removeReport:e=>ipcRenderer.invoke("reporting:removeReport",e),scheduleReport:(e,n)=>ipcRenderer.invoke("reporting:scheduleReport",e,n),getScheduledReports:()=>ipcRenderer.invoke("reporting:getScheduledReports")},rbac:{getRoles:()=>ipcRenderer.invoke("rbac:getRoles"),getRole:e=>ipcRenderer.invoke("rbac:getRole",e),createRole:e=>ipcRenderer.invoke("rbac:createRole",e),updateRole:(e,n)=>ipcRenderer.invoke("rbac:updateRole",e,n),deleteRole:e=>ipcRenderer.invoke("rbac:deleteRole",e),getRoleAssignments:()=>ipcRenderer.invoke("rbac:getRoleAssignments"),getUserRoles:(e,n)=>ipcRenderer.invoke("rbac:getUserRoles",e,n),assignRole:(e,n,i,r,t)=>ipcRenderer.invoke("rbac:assignRole",e,n,i,r,t),revokeRole:(e,n,i)=>ipcRenderer.invoke("rbac:revokeRole",e,n,i),hasPermission:(e,n,i)=>ipcRenderer.invoke("rbac:hasPermission",e,n,i),getUserEffectivePermissions:(e,n)=>ipcRenderer.invoke("rbac:getUserEffectivePermissions",e,n),getAccessContext:(e,n)=>ipcRenderer.invoke("rbac:getAccessContext",e,n),bulkAssignRole:(e,n,i,r)=>ipcRenderer.invoke("rbac:bulkAssignRole",e,n,i,r),bulkRevokeRole:(e,n,i)=>ipcRenderer.invoke("rbac:bulkRevokeRole",e,n,i),getPermissionMatrix:()=>ipcRenderer.invoke("rbac:getPermissionMatrix"),exportConfiguration:()=>ipcRenderer.invoke("rbac:exportConfiguration"),importConfiguration:()=>ipcRenderer.invoke("rbac:importConfiguration"),getUsers:()=>ipcRenderer.invoke("rbac:getUsers"),getTenants:()=>ipcRenderer.invoke("rbac:getTenants")},billing:{getPlans:()=>ipcRenderer.invoke("billing:getPlans"),getPlan:e=>ipcRenderer.invoke("billing:getPlan",e),createPlan:e=>ipcRenderer.invoke("billing:createPlan",e),updatePlan:(e,n)=>ipcRenderer.invoke("billing:updatePlan",e,n),deletePlan:e=>ipcRenderer.invoke("billing:deletePlan",e),getTenantBilling:e=>ipcRenderer.invoke("billing:getTenantBilling",e),createTenantBilling:e=>ipcRenderer.invoke("billing:createTenantBilling",e),updateTenantBilling:(e,n)=>ipcRenderer.invoke("billing:updateTenantBilling",e,n),recordUsage:(e,n,i,r)=>ipcRenderer.invoke("billing:recordUsage",e,n,i,r),getCurrentUsage:(e,n)=>ipcRenderer.invoke("billing:getCurrentUsage",e,n),getUsageHistory:(e,n,i,r)=>ipcRenderer.invoke("billing:getUsageHistory",e,n,i,r),getInvoices:e=>ipcRenderer.invoke("billing:getInvoices",e),getInvoice:e=>ipcRenderer.invoke("billing:getInvoice",e),generateInvoice:(e,n)=>ipcRenderer.invoke("billing:generateInvoice",e,n),updateInvoiceStatus:(e,n)=>ipcRenderer.invoke("billing:updateInvoiceStatus",e,n),getAlerts:e=>ipcRenderer.invoke("billing:getAlerts",e),createAlert:e=>ipcRenderer.invoke("billing:createAlert",e),acknowledgeAlert:e=>ipcRenderer.invoke("billing:acknowledgeAlert",e),deleteAlert:e=>ipcRenderer.invoke("billing:deleteAlert",e),generateReport:(e,n,i,r)=>ipcRenderer.invoke("billing:generateReport",e,n,i,r),exportData:(e,n,i)=>ipcRenderer.invoke("billing:exportData",e,n,i),getBillingConfiguration:()=>ipcRenderer.invoke("billing:getBillingConfiguration"),updateBillingConfiguration:e=>ipcRenderer.invoke("billing:updateBillingConfiguration",e),testBillingService:()=>ipcRenderer.invoke("billing:testBillingService"),resetBillingData:e=>ipcRenderer.invoke("billing:resetBillingData",e),getUsageData:()=>ipcRenderer.invoke("billing:getUsageData"),getSummary:()=>ipcRenderer.invoke("billing:getSummary")},compliance:{getEnabledFrameworks:()=>ipcRenderer.invoke("compliance:getEnabledFrameworks"),enableFramework:e=>ipcRenderer.invoke("compliance:enableFramework",e),disableFramework:e=>ipcRenderer.invoke("compliance:disableFramework",e),getControls:e=>ipcRenderer.invoke("compliance:getControls",e),getControl:e=>ipcRenderer.invoke("compliance:getControl",e),updateControlStatus:(e,n)=>ipcRenderer.invoke("compliance:updateControlStatus",e,n),getAssessments:e=>ipcRenderer.invoke("compliance:getAssessments",e),getAssessment:e=>ipcRenderer.invoke("compliance:getAssessment",e),createAssessment:e=>ipcRenderer.invoke("compliance:createAssessment",e),updateAssessment:(e,n)=>ipcRenderer.invoke("compliance:updateAssessment",e,n),deleteAssessment:e=>ipcRenderer.invoke("compliance:deleteAssessment",e),addEvidence:(e,n)=>ipcRenderer.invoke("compliance:addEvidence",e,n),getEvidenceByControl:e=>ipcRenderer.invoke("compliance:getEvidenceByControl",e),deleteEvidence:e=>ipcRenderer.invoke("compliance:deleteEvidence",e),getRemediationActions:e=>ipcRenderer.invoke("compliance:getRemediationActions",e),createRemediationAction:e=>ipcRenderer.invoke("compliance:createRemediationAction",e),updateRemediationAction:(e,n)=>ipcRenderer.invoke("compliance:updateRemediationAction",e,n),deleteRemediationAction:e=>ipcRenderer.invoke("compliance:deleteRemediationAction",e),getFindings:e=>ipcRenderer.invoke("compliance:getFindings",e),createFinding:e=>ipcRenderer.invoke("compliance:createFinding",e),updateFinding:(e,n)=>ipcRenderer.invoke("compliance:updateFinding",e,n),deleteFinding:e=>ipcRenderer.invoke("compliance:deleteFinding",e),generateReport:(e,n)=>ipcRenderer.invoke("compliance:generateReport",e,n),getReports:()=>ipcRenderer.invoke("compliance:getReports"),deleteReport:e=>ipcRenderer.invoke("compliance:deleteReport",e),getAlerts:e=>ipcRenderer.invoke("compliance:getAlerts",e),createAlert:e=>ipcRenderer.invoke("compliance:createAlert",e),acknowledgeAlert:e=>ipcRenderer.invoke("compliance:acknowledgeAlert",e),deleteAlert:e=>ipcRenderer.invoke("compliance:deleteAlert",e),getMetrics:e=>ipcRenderer.invoke("compliance:getMetrics",e),getConfiguration:()=>ipcRenderer.invoke("compliance:getConfiguration"),updateConfiguration:e=>ipcRenderer.invoke("compliance:updateConfiguration",e)},automation:{getTasks:()=>ipcRenderer.invoke("automation:getTasks"),getTask:e=>ipcRenderer.invoke("automation:getTask",e),createTask:e=>ipcRenderer.invoke("automation:createTask",e),updateTask:(e,n)=>ipcRenderer.invoke("automation:updateTask",e,n),deleteTask:e=>ipcRenderer.invoke("automation:deleteTask",e),executeTask:(e,n)=>ipcRenderer.invoke("automation:executeTask",e,n),updateTaskStatus:(e,n)=>ipcRenderer.invoke("automation:updateTaskStatus",e,n),getWorkflows:()=>ipcRenderer.invoke("automation:getWorkflows"),getWorkflow:e=>ipcRenderer.invoke("automation:getWorkflow",e),createWorkflow:e=>ipcRenderer.invoke("automation:createWorkflow",e),updateWorkflow:(e,n)=>ipcRenderer.invoke("automation:updateWorkflow",e,n),deleteWorkflow:e=>ipcRenderer.invoke("automation:deleteWorkflow",e),executeWorkflow:(e,n)=>ipcRenderer.invoke("automation:executeWorkflow",e,n),getExecutionHistory:e=>ipcRenderer.invoke("automation:getExecutionHistory",e),getRecentExecutions:()=>ipcRenderer.invoke("automation:getRecentExecutions"),getMetrics:()=>ipcRenderer.invoke("automation:getMetrics"),getScheduledJobs:()=>ipcRenderer.invoke("automation:getScheduledJobs"),scheduleTask:(e,n)=>ipcRenderer.invoke("automation:scheduleTask",e,n),unscheduleTask:e=>ipcRenderer.invoke("automation:unscheduleTask",e),pauseTask:e=>ipcRenderer.invoke("automation:pauseTask",e),resumeTask:e=>ipcRenderer.invoke("automation:resumeTask",e),getSystemStatus:()=>ipcRenderer.invoke("automation:getSystemStatus"),restartService:()=>ipcRenderer.invoke("automation:restartService"),stopService:()=>ipcRenderer.invoke("automation:stopService"),startService:()=>ipcRenderer.invoke("automation:startService")},analytics:{ingestMetricData:(e,n,i)=>ipcRenderer.invoke("analytics:ingestMetricData",e,n,i),ingestBulkData:e=>ipcRenderer.invoke("analytics:ingestBulkData",e),generatePredictions:(e,n)=>ipcRenderer.invoke("analytics:generatePredictions",e,n),getPredictions:e=>ipcRenderer.invoke("analytics:getPredictions",e),analyzeTrends:e=>ipcRenderer.invoke("analytics:analyzeTrends",e),getTrends:e=>ipcRenderer.invoke("analytics:getTrends",e),generateOptimizations:()=>ipcRenderer.invoke("analytics:generateOptimizations"),getRecommendations:e=>ipcRenderer.invoke("analytics:getRecommendations",e),implementRecommendation:e=>ipcRenderer.invoke("analytics:implementRecommendation",e),analyzeRisks:()=>ipcRenderer.invoke("analytics:analyzeRisks"),getRisks:e=>ipcRenderer.invoke("analytics:getRisks",e),generateCapacityForecasts:()=>ipcRenderer.invoke("analytics:generateCapacityForecasts"),getCapacityForecasts:()=>ipcRenderer.invoke("analytics:getCapacityForecasts"),calculateSecurityScore:()=>ipcRenderer.invoke("analytics:calculateSecurityScore"),getSecurityScore:()=>ipcRenderer.invoke("analytics:getSecurityScore"),getMetrics:()=>ipcRenderer.invoke("analytics:getMetrics"),getSummary:()=>ipcRenderer.invoke("analytics:getSummary")},config:{get:()=>ipcRenderer.invoke("config:get"),update:e=>ipcRenderer.invoke("config:update",e),getLLMConfig:()=>ipcRenderer.invoke("config:getLLMConfig"),saveLLMConfig:e=>ipcRenderer.invoke("config:saveLLMConfig",e),clearModelCache:e=>ipcRenderer.invoke("config:clearModelCache",e),getCachedModels:e=>ipcRenderer.invoke("config:getCachedModels",e),saveCloudProviderConfig:(e,n)=>ipcRenderer.invoke("config:saveCloudProviderConfig",e,n),getCloudProviderConfig:e=>ipcRenderer.invoke("config:getCloudProviderConfig",e),getConfiguredCloudProviders:()=>ipcRenderer.invoke("config:getConfiguredCloudProviders"),setDefaultCloudProvider:e=>ipcRenderer.invoke("config:setDefaultCloudProvider",e),getDefaultCloudProvider:()=>ipcRenderer.invoke("config:getDefaultCloudProvider"),removeCloudProviderConfig:e=>ipcRenderer.invoke("config:removeCloudProviderConfig",e),getEntraConfig:()=>ipcRenderer.invoke("config:getEntraConfig"),saveEntraConfig:e=>ipcRenderer.invoke("config:saveEntraConfig",e),clearEntraConfig:()=>ipcRenderer.invoke("config:clearEntraConfig"),getMCPConfig:()=>ipcRenderer.invoke("config:getMCPConfig"),saveMCPConfig:e=>ipcRenderer.invoke("config:saveMCPConfig",e),updateLokkaMCPConfig:e=>ipcRenderer.invoke("config:updateLokkaMCPConfig",e),isLokkaMCPConfigured:()=>ipcRenderer.invoke("config:isLokkaMCPConfigured"),getCustomMCPServers:()=>ipcRenderer.invoke("config:getCustomMCPServers"),addCustomMCPServer:e=>ipcRenderer.invoke("config:addCustomMCPServer",e),removeCustomMCPServer:e=>ipcRenderer.invoke("config:removeCustomMCPServer",e),updateCustomMCPServer:(e,n)=>ipcRenderer.invoke("config:updateCustomMCPServer",e,n),testMCPServerConnection:e=>ipcRenderer.invoke("config:testMCPServerConnection",e),validateMCPServerConfig:e=>ipcRenderer.invoke("config:validateMCPServerConfig",e)},app:{getVersion:()=>ipcRenderer.invoke("app:getVersion")},updater:{checkForUpdates:()=>ipcRenderer.invoke("updater:checkForUpdates"),downloadUpdate:()=>ipcRenderer.invoke("updater:downloadUpdate"),installUpdate:()=>ipcRenderer.invoke("updater:installUpdate"),getCurrentVersion:()=>ipcRenderer.invoke("updater:getCurrentVersion"),isUpdatePending:()=>ipcRenderer.invoke("updater:isUpdatePending"),setAutoUpdateEnabled:e=>ipcRenderer.invoke("updater:setAutoUpdateEnabled",e),getAutoUpdateEnabled:()=>ipcRenderer.invoke("updater:getAutoUpdateEnabled")},send:(e,n)=>{["auth:logoutBroadcast"].includes(e)?ipcRenderer.send(e,n):console.warn(`Invalid send channel: ${e}`)},on:(e,n)=>{if(["auth-status-changed","chat-message","graph-api-call","config:defaultCloudProviderChanged","auth:configurationAvailable","auth:enhancedGraphAccessChanged","auth:logout","llm:forceStatusRefresh","update:checking-for-update","update:available","update:not-available","update:error","update:download-progress","update:downloaded","main-debug"].includes(e)){const i=ipcRenderer.listenerCount(e);ipcRenderer.removeListener(e,n),i>25&&(console.warn(`Too many listeners for ${e} (${i}). Performing aggressive cleanup...`),ipcRenderer.removeAllListeners(e)),ipcRenderer.on(e,n);const r=ipcRenderer.listenerCount(e),t=ipcRenderer.getMaxListeners();if(r>=t-2){const n=Math.min(t+5,50);ipcRenderer.setMaxListeners(n),console.log(`Increased max listeners for channel ${e} to ${n}. Current: ${r}`)}console.log(`Added listener for ${e}. Before: ${i}, After: ${r}`)}},removeListener:(e,n)=>{["auth-status-changed","chat-message","graph-api-call","config:defaultCloudProviderChanged","auth:configurationAvailable","auth:enhancedGraphAccessChanged","llm:forceStatusRefresh","update:checking-for-update","update:available","update:not-available","update:error","update:download-progress","update:downloaded","main-debug"].includes(e)&&ipcRenderer.removeListener(e,n)},removeAllListeners:e=>{["auth-status-changed","chat-message","graph-api-call","config:defaultCloudProviderChanged","auth:configurationAvailable","auth:enhancedGraphAccessChanged","llm:forceStatusRefresh","update:checking-for-update","update:available","update:not-available","update:error","update:download-progress","update:downloaded","main-debug"].includes(e)&&ipcRenderer.removeAllListeners(e)},getListenerDiagnostics:()=>{const e={};return["auth-status-changed","chat-message","graph-api-call","config:defaultCloudProviderChanged","auth:configurationAvailable","auth:enhancedGraphAccessChanged","llm:forceStatusRefresh","update:checking-for-update","update:available","update:not-available","update:error","update:download-progress","update:downloaded","main-debug"].forEach((n=>{e[n]={count:ipcRenderer.listenerCount(n),maxListeners:ipcRenderer.getMaxListeners()}})),e},forceCleanupListeners:e=>{if(["auth-status-changed","chat-message","graph-api-call","config:defaultCloudProviderChanged","auth:configurationAvailable","auth:enhancedGraphAccessChanged","auth:logout","llm:forceStatusRefresh","main-debug"].includes(e)){const n=ipcRenderer.listenerCount(e);ipcRenderer.removeAllListeners(e);const i=ipcRenderer.listenerCount(e);return console.log(`Force cleaned ${e}: ${n} -> ${i} listeners`),{before:n,after:i}}return null}});