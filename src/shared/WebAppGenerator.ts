// WebAppGenerator.ts
// Generates web applications (Streamlit, HTML, React, Next.js) from data and configurations

import { Artifact, WebAppConfig, WebAppTemplate, WebAppGenerationRequest, WebAppComponent } from '../types/artifacts';

export class WebAppGenerator {
  private static templates: Map<string, WebAppTemplate> = new Map();

  /**
   * Initialize with built-in templates
   */
  static initialize() {
    this.registerDefaultTemplates();
  }

  /**
   * Generate a web application artifact from data and configuration
   */
  static async generateWebApp(request: WebAppGenerationRequest): Promise<Artifact> {
    const { data, config, template, customizations } = request;

    let generatedCode: string;
    let title: string;
    let artifactType: string;

    switch (config.framework) {
      case 'streamlit':
        generatedCode = this.generateStreamlitApp(data, config, customizations);
        title = `${config.title} - Streamlit App`;
        artifactType = 'application/streamlit';
        break;

      case 'html':
        generatedCode = this.generateHTMLApp(data, config, customizations);
        title = `${config.title} - HTML Dashboard`;
        artifactType = 'application/webapp';
        break;

      case 'react':
        generatedCode = this.generateReactApp(data, config, customizations);
        title = `${config.title} - React App`;
        artifactType = 'application/react';
        break;

      case 'nextjs':
        generatedCode = this.generateNextJSApp(data, config, customizations);
        title = `${config.title} - Next.js App`;
        artifactType = 'application/nextjs';
        break;

      default:
        throw new Error(`Unsupported framework: ${config.framework}`);
    }

    return {
      id: this.generateId(),
      type: artifactType as any,
      title,
      content: generatedCode,
      language: this.getLanguageForFramework(config.framework),
      description: config.description,
      createdAt: new Date(),
      updatedAt: new Date(),
      metadata: {
        dependencies: this.getDependenciesForFramework(config.framework),
        size: generatedCode.length,
        tags: [config.framework, 'webapp', 'generated'],
        author: 'DynamicEndpoint Assistant',
        version: '1.0.0'
      }
    };
  }

  /**
   * Generate Streamlit application
   */
  private static generateStreamlitApp(data: any, config: WebAppConfig, customizations?: Record<string, any>): string {
    const dataJson = JSON.stringify(data, null, 2);
    
    let code = `import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
import json
from datetime import datetime

# Set page configuration
st.set_page_config(
    page_title="${config.title}",
    page_icon="📊",
    layout="wide",
    initial_sidebar_state="expanded"
)

# App title and description
st.title("${config.title}")
${config.description ? `st.markdown("${config.description}")` : ''}

# Load data
@st.cache_data
def load_data():
    data = ${dataJson}
    if isinstance(data, list) and len(data) > 0:
        return pd.DataFrame(data)
    return pd.DataFrame(data) if isinstance(data, dict) else pd.DataFrame()

df = load_data()

# Sidebar
st.sidebar.header("Controls")

# Main content
if not df.empty:
`;

    // Generate components based on config
    config.components.forEach((component, index) => {
      code += this.generateStreamlitComponent(component, index);
    });

    code += `
else:
    st.error("No data available to display")

# Footer
st.markdown("---")
st.markdown("Generated by DynamicEndpoint Assistant")
`;

    return code;
  }

  /**
   * Generate HTML application
   */
  private static generateHTMLApp(data: any, config: WebAppConfig, customizations?: Record<string, any>): string {
    const dataJson = JSON.stringify(data, null, 2);
    const primaryColor = config.styling?.primaryColor || '#1f77b4';
    
    // Auto-detect data structure for intelligent layout
    const dataStructure = this.analyzeDataStructure(data);
    
    const intelligentComponents = this.generateIntelligentHTMLComponents(data, dataStructure);
    const interactiveJS = this.generateInteractiveJS(data, dataStructure);
    
    return `<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>${config.title}</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background-color: ${config.styling?.theme === 'dark' ? '#1a1a1a' : '#f5f5f5'};
            color: ${config.styling?.theme === 'dark' ? '#ffffff' : '#333333'};
            line-height: 1.6;
        }
        
        .header {
            background: linear-gradient(135deg, ${primaryColor}, ${primaryColor}dd);
            color: white;
            padding: 2rem;
            text-align: center;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }
        
        .header h1 {
            font-size: 2.5rem;
            margin-bottom: 0.5rem;
        }
        
        .header p {
            font-size: 1.1rem;
            opacity: 0.9;
        }
        
        .container {
            max-width: 1400px;
            margin: 0 auto;
            padding: 2rem;
        }
        
        .summary-cards {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 1.5rem;
            margin-bottom: 2rem;
        }
        
        .summary-card {
            background: ${config.styling?.theme === 'dark' ? '#2a2a2a' : 'white'};
            border-radius: 12px;
            padding: 1.5rem;
            box-shadow: 0 4px 15px rgba(0,0,0,0.1);
            display: flex;
            align-items: center;
            gap: 1rem;
            transition: transform 0.2s, box-shadow 0.2s;
        }
        
        .summary-card:hover {
            transform: translateY(-2px);
            box-shadow: 0 6px 20px rgba(0,0,0,0.15);
        }
        
        .card-icon {
            font-size: 2.5rem;
            width: 60px;
            height: 60px;
            display: flex;
            align-items: center;
            justify-content: center;
            background: ${primaryColor}20;
            border-radius: 50%;
        }
        
        .card-content {
            flex: 1;
        }
        
        .card-number {
            font-size: 2rem;
            font-weight: bold;
            color: ${primaryColor};
            margin-bottom: 0.25rem;
        }
        
        .card-label {
            font-size: 0.9rem;
            opacity: 0.8;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }
        
        .data-section {
            background: ${config.styling?.theme === 'dark' ? '#2a2a2a' : 'white'};
            border-radius: 12px;
            padding: 2rem;
            box-shadow: 0 4px 15px rgba(0,0,0,0.1);
        }
        
        .section-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 2rem;
            flex-wrap: wrap;
            gap: 1rem;
        }
        
        .section-header h2 {
            color: ${primaryColor};
            font-size: 1.8rem;
        }
        
        .search-controls {
            display: flex;
            gap: 1rem;
            flex-wrap: wrap;
        }
        
        .search-box, .filter-select {
            padding: 0.5rem 1rem;
            border: 1px solid ${config.styling?.theme === 'dark' ? '#444' : '#ddd'};
            border-radius: 8px;
            background: ${config.styling?.theme === 'dark' ? '#333' : 'white'};
            color: ${config.styling?.theme === 'dark' ? '#fff' : '#333'};
            font-size: 0.9rem;
        }
        
        .search-box {
            min-width: 250px;
        }
        
        .data-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));
            gap: 1.5rem;
        }
        
        .data-card {
            background: ${config.styling?.theme === 'dark' ? '#333' : '#f9f9f9'};
            border-radius: 8px;
            padding: 1.5rem;
            border-left: 4px solid ${primaryColor};
            transition: transform 0.2s, box-shadow 0.2s;
        }
        
        .data-card:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 15px rgba(0,0,0,0.1);
        }
        
        .card-header {
            display: flex;
            justify-content: space-between;
            align-items: flex-start;
            margin-bottom: 1rem;
        }
        
        .card-title {
            font-weight: bold;
            font-size: 1.1rem;
            color: ${primaryColor};
            flex: 1;
            margin-right: 1rem;
        }
        
        .card-status {
            padding: 0.25rem 0.75rem;
            border-radius: 20px;
            font-size: 0.8rem;
            font-weight: bold;
            text-transform: uppercase;
        }
        
        .status-enabled {
            background: #e8f5e8;
            color: #2e7d32;
        }
        
        .status-disabled {
            background: #ffebee;
            color: #c62828;
        }
        
        .status-neutral {
            background: #e3f2fd;
            color: #1565c0;
        }
        
        .card-subtitle {
            color: ${config.styling?.theme === 'dark' ? '#bbb' : '#666'};
            margin-bottom: 1rem;
            font-size: 0.9rem;
        }
        
        .card-details {
            margin-bottom: 1rem;
        }
        
        .detail-item {
            margin-bottom: 0.5rem;
            font-size: 0.85rem;
        }
        
        .detail-label {
            font-weight: bold;
            color: ${config.styling?.theme === 'dark' ? '#ccc' : '#555'};
            text-transform: capitalize;
        }
        
        .detail-value {
            margin-left: 0.5rem;
        }
        
        .card-actions {
            text-align: right;
        }
        
        .btn-details {
            background: ${primaryColor};
            color: white;
            border: none;
            padding: 0.5rem 1rem;
            border-radius: 6px;
            cursor: pointer;
            font-size: 0.85rem;
            transition: background-color 0.2s;
        }
        
        .btn-details:hover {
            background: ${primaryColor}dd;
        }
        
        .single-item-card {
            background: ${config.styling?.theme === 'dark' ? '#333' : '#f9f9f9'};
            border-radius: 8px;
            padding: 2rem;
        }
        
        .single-item-details h3 {
            color: ${primaryColor};
            margin-bottom: 1.5rem;
            font-size: 1.5rem;
        }
        
        .details-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 1rem;
        }
        
        .detail-row {
            display: flex;
            padding: 0.75rem;
            background: ${config.styling?.theme === 'dark' ? '#2a2a2a' : 'white'};
            border-radius: 6px;
            border-left: 3px solid ${primaryColor};
        }
        
        .detail-key {
            font-weight: bold;
            min-width: 120px;
            color: ${primaryColor};
            margin-right: 1rem;
        }
        
        .detail-value {
            flex: 1;
            word-break: break-all;
        }
        
        .detail-modal {
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: rgba(0,0,0,0.7);
            display: flex;
            align-items: center;
            justify-content: center;
            z-index: 1000;
            padding: 2rem;
        }
        
        .modal-content {
            background: ${config.styling?.theme === 'dark' ? '#2a2a2a' : 'white'};
            border-radius: 12px;
            max-width: 800px;
            max-height: 80vh;
            width: 100%;
            overflow: hidden;
            box-shadow: 0 20px 40px rgba(0,0,0,0.3);
        }
        
        .modal-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 1.5rem 2rem;
            border-bottom: 1px solid ${config.styling?.theme === 'dark' ? '#444' : '#eee'};
            background: ${primaryColor};
            color: white;
        }
        
        .modal-header h3 {
            margin: 0;
        }
        
        .close-btn {
            background: none;
            border: none;
            color: white;
            font-size: 1.5rem;
            cursor: pointer;
            padding: 0;
            width: 30px;
            height: 30px;
            display: flex;
            align-items: center;
            justify-content: center;
            border-radius: 50%;
            transition: background-color 0.2s;
        }
        
        .close-btn:hover {
            background: rgba(255,255,255,0.2);
        }
        
        .modal-body {
            padding: 2rem;
            max-height: 60vh;
            overflow-y: auto;
        }
        
        .modal-body pre {
            background: ${config.styling?.theme === 'dark' ? '#1a1a1a' : '#f5f5f5'};
            padding: 1rem;
            border-radius: 6px;
            overflow-x: auto;
            font-size: 0.85rem;
            line-height: 1.4;
        }
        
        @media (max-width: 768px) {
            .header {
                padding: 1.5rem 1rem;
            }
            
            .header h1 {
                font-size: 2rem;
            }
            
            .container {
                padding: 1rem;
            }
            
            .section-header {
                flex-direction: column;
                align-items: stretch;
            }
            
            .search-controls {
                justify-content: stretch;
            }
            
            .search-box {
                min-width: auto;
                flex: 1;
            }
            
            .data-grid {
                grid-template-columns: 1fr;
            }
            
            .summary-cards {
                grid-template-columns: 1fr;
            }
            
            .details-grid {
                grid-template-columns: 1fr;
            }
        }
        
        ${config.styling?.customCSS || ''}
    </style>
</head>
<body>
    <div class="header">
        <h1>${config.title}</h1>
        ${config.description ? `<p>${config.description}</p>` : ''}
    </div>
    
    <div class="container">
        ${intelligentComponents}
    </div>
    
    <script>
        ${interactiveJS}
    </script>
</body>
</html>`;
  }

  /**
   * Generate React application
   */
  private static generateReactApp(data: any, config: WebAppConfig, customizations?: Record<string, any>): string {
    const dataJson = JSON.stringify(data, null, 2);
    
    return `import React, { useState, useEffect } from 'react';
import { 
  BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend,
  LineChart, Line, PieChart, Pie, Cell, ResponsiveContainer
} from 'recharts';

const ${this.toPascalCase(config.title)}App = () => {
  const [data, setData] = useState(${dataJson});
  const [loading, setLoading] = useState(false);

  const primaryColor = '${config.styling?.primaryColor || '#1f77b4'}';
  const theme = '${config.styling?.theme || 'light'}';

  const styles = {
    container: {
      fontFamily: 'Segoe UI, Tahoma, Geneva, Verdana, sans-serif',
      backgroundColor: theme === 'dark' ? '#1a1a1a' : '#f5f5f5',
      color: theme === 'dark' ? '#ffffff' : '#333333',
      minHeight: '100vh'
    },
    header: {
      background: \`linear-gradient(135deg, \${primaryColor}, \${primaryColor}aa)\`,
      color: 'white',
      padding: '2rem',
      textAlign: 'center'
    },
    content: {
      maxWidth: '1200px',
      margin: '0 auto',
      padding: '2rem'
    },
    grid: {
      display: 'grid',
      gridTemplateColumns: 'repeat(auto-fit, minmax(300px, 1fr))',
      gap: '2rem',
      marginTop: '2rem'
    },
    card: {
      backgroundColor: theme === 'dark' ? '#2a2a2a' : 'white',
      borderRadius: '8px',
      padding: '1.5rem',
      boxShadow: '0 2px 10px rgba(0,0,0,0.1)'
    }
  };

  return (
    <div style={styles.container}>
      <div style={styles.header}>
        <h1>${config.title}</h1>
        ${config.description ? `<p>${config.description}</p>` : ''}
      </div>
      
      <div style={styles.content}>
        <div style={styles.grid}>
          ${config.components.map((component, index) => 
            this.generateReactComponent(component, index)
          ).join('\n          ')}
        </div>
      </div>
    </div>
  );
};

export default ${this.toPascalCase(config.title)}App;`;
  }

  /**
   * Generate Next.js application
   */
  private static generateNextJSApp(data: any, config: WebAppConfig, customizations?: Record<string, any>): string {
    const dataJson = JSON.stringify(data, null, 2);
    
    return `import React, { useState, useEffect } from 'react';
import Head from 'next/head';
import dynamic from 'next/dynamic';

// Dynamically import chart components to avoid SSR issues
const Chart = dynamic(() => import('react-chartjs-2'), { ssr: false });

export default function ${this.toPascalCase(config.title)}Page() {
  const [data, setData] = useState(${dataJson});
  const [mounted, setMounted] = useState(false);

  useEffect(() => {
    setMounted(true);
  }, []);

  if (!mounted) {
    return <div>Loading...</div>;
  }

  return (
    <>
      <Head>
        <title>${config.title}</title>
        <meta name="description" content="${config.description || ''}" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      
      <main className="min-h-screen bg-gray-50 dark:bg-gray-900">
        <div className="bg-gradient-to-r from-blue-600 to-blue-800 text-white py-16">
          <div className="container mx-auto px-4 text-center">
            <h1 className="text-4xl font-bold mb-4">${config.title}</h1>
            ${config.description ? `<p className="text-xl opacity-90">${config.description}</p>` : ''}
          </div>
        </div>
        
        <div className="container mx-auto px-4 py-8">
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
            ${config.components.map((component, index) => 
              this.generateNextJSComponent(component, index)
            ).join('\n            ')}
          </div>
        </div>
      </main>
    </>
  );
}

// API route for data fetching
export async function getStaticProps() {
  return {
    props: {
      data: ${dataJson}
    },
    revalidate: 3600 // Revalidate every hour
  };
}`;
  }

  /**
   * Generate component code for Streamlit
   */
  private static generateStreamlitComponent(component: WebAppComponent, index: number): string {
    switch (component.type) {
      case 'chart':
        return `
# Chart: ${component.title || `Chart ${index + 1}`}
if st.sidebar.checkbox("Show ${component.title || `Chart ${index + 1}`}", True):
    st.subheader("${component.title || `Chart ${index + 1}`}")
    if len(df.columns) >= 2:
        col1, col2 = st.columns(2)
        with col1:
            x_axis = st.selectbox("X-axis", df.columns, key=f"x_{index}")
        with col2:
            y_axis = st.selectbox("Y-axis", df.select_dtypes(include=['number']).columns, key=f"y_{index}")
        
        chart_type = st.radio("Chart Type", ["Bar", "Line", "Scatter"], key=f"chart_type_{index}")
        
        if chart_type == "Bar":
            fig = px.bar(df, x=x_axis, y=y_axis, title="${component.title || `Chart ${index + 1}`}")
        elif chart_type == "Line":
            fig = px.line(df, x=x_axis, y=y_axis, title="${component.title || `Chart ${index + 1}`}")
        else:
            fig = px.scatter(df, x=x_axis, y=y_axis, title="${component.title || `Chart ${index + 1}`}")
        
        st.plotly_chart(fig, use_container_width=True)
`;

      case 'table':
        return `
# Table: ${component.title || `Table ${index + 1}`}
if st.sidebar.checkbox("Show ${component.title || `Table ${index + 1}`}", True):
    st.subheader("${component.title || `Table ${index + 1}`}")
    st.dataframe(df, use_container_width=True)
`;

      case 'metric':
        return `
# Metrics: ${component.title || `Metrics ${index + 1}`}
if st.sidebar.checkbox("Show ${component.title || `Metrics ${index + 1}`}", True):
    numeric_cols = df.select_dtypes(include=['number']).columns
    if len(numeric_cols) > 0:
        col1, col2, col3 = st.columns(3)
        for i, col in enumerate(numeric_cols[:3]):
            with [col1, col2, col3][i]:
                st.metric(
                    label=col.title(),
                    value=f"{df[col].sum():,.0f}",
                    delta=f"{df[col].mean():.2f}"
                )
`;

      default:
        return `
# ${component.type}: ${component.title || `Component ${index + 1}`}
st.write("Component type '${component.type}' not implemented yet")
`;
    }
  }

  /**
   * Generate component code for HTML
   */
  private static generateHTMLComponent(component: WebAppComponent, index: number): string {
    switch (component.type) {
      case 'chart':
        return `
// Chart ${index + 1}
const chartDiv${index} = document.createElement('div');
chartDiv${index}.className = 'card';
chartDiv${index}.innerHTML = \`
    <h3>${component.title || `Chart ${index + 1}`}</h3>
    <div id="chart${index}" class="chart-container"></div>
\`;
dashboard.appendChild(chartDiv${index});

// Create chart data
if (Array.isArray(data) && data.length > 0) {
    const chartData = data.map((d, i) => ({
        x: Object.keys(d)[0] ? d[Object.keys(d)[0]] : i,
        y: Object.keys(d)[1] ? d[Object.keys(d)[1]] : Math.random() * 100
    }));
    
    Plotly.newPlot('chart${index}', [{
        x: chartData.map(d => d.x),
        y: chartData.map(d => d.y),
        type: 'bar',
        marker: { color: '${component.config?.color || '#1f77b4'}' }
    }], {
        title: '${component.title || `Chart ${index + 1}`}',
        responsive: true
    });
}`;

      case 'metric':
        return `
// Metric ${index + 1}
const metricDiv${index} = document.createElement('div');
metricDiv${index}.className = 'card metric';
const metricValue = Array.isArray(data) ? data.length : (typeof data === 'object' ? Object.keys(data).length : 0);
metricDiv${index}.innerHTML = \`
    <div class="metric-value">\${metricValue.toLocaleString()}</div>
    <div class="metric-label">${component.title || `Metric ${index + 1}`}</div>
\`;
dashboard.appendChild(metricDiv${index});`;

      default:
        return `
// ${component.type} ${index + 1}
const componentDiv${index} = document.createElement('div');
componentDiv${index}.className = 'card';
componentDiv${index}.innerHTML = \`<h3>${component.title || `Component ${index + 1}`}</h3><p>Component type '${component.type}' not implemented yet</p>\`;
dashboard.appendChild(componentDiv${index});`;
    }
  }

  /**
   * Generate component code for React
   */
  private static generateReactComponent(component: WebAppComponent, index: number): string {
    switch (component.type) {
      case 'chart':
        return `
<div key="${index}" style={styles.card}>
  <h3>${component.title || `Chart ${index + 1}`}</h3>
  <ResponsiveContainer width="100%" height={300}>
    <BarChart data={Array.isArray(data) ? data : [data]}>
      <CartesianGrid strokeDasharray="3 3" />
      <XAxis dataKey={Object.keys(data[0] || {})[0] || 'name'} />
      <YAxis />
      <Tooltip />
      <Legend />
      <Bar dataKey={Object.keys(data[0] || {})[1] || 'value'} fill={primaryColor} />
    </BarChart>
  </ResponsiveContainer>
</div>`;

      case 'metric':
        return `
<div key="${index}" style={{...styles.card, textAlign: 'center'}}>
  <div style={{fontSize: '3rem', fontWeight: 'bold', color: primaryColor}}>
    {Array.isArray(data) ? data.length.toLocaleString() : Object.keys(data).length.toLocaleString()}
  </div>
  <div style={{fontSize: '1.2rem', marginTop: '0.5rem', opacity: 0.8}}>
    ${component.title || `Metric ${index + 1}`}
  </div>
</div>`;

      default:
        return `
<div key="${index}" style={styles.card}>
  <h3>${component.title || `Component ${index + 1}`}</h3>
  <p>Component type '${component.type}' not implemented yet</p>
</div>`;
    }
  }

  /**
   * Generate component code for Next.js
   */
  private static generateNextJSComponent(component: WebAppComponent, index: number): string {
    switch (component.type) {
      case 'chart':
        return `
<div key="${index}" className="bg-white dark:bg-gray-800 rounded-lg p-6 shadow-lg">
  <h3 className="text-xl font-semibold mb-4 text-gray-800 dark:text-white">
    ${component.title || `Chart ${index + 1}`}
  </h3>
  <div className="h-64">
    {/* Chart implementation would go here */}
    <div className="flex items-center justify-center h-full bg-gray-100 dark:bg-gray-700 rounded">
      <p className="text-gray-600 dark:text-gray-300">Chart Component</p>
    </div>
  </div>
</div>`;

      case 'metric':
        return `
<div key="${index}" className="bg-white dark:bg-gray-800 rounded-lg p-6 shadow-lg text-center">
  <div className="text-4xl font-bold text-blue-600 dark:text-blue-400 mb-2">
    {Array.isArray(data) ? data.length.toLocaleString() : Object.keys(data).length.toLocaleString()}
  </div>
  <div className="text-lg text-gray-600 dark:text-gray-300">
    ${component.title || `Metric ${index + 1}`}
  </div>
</div>`;

      default:
        return `
<div key="${index}" className="bg-white dark:bg-gray-800 rounded-lg p-6 shadow-lg">
  <h3 className="text-xl font-semibold mb-4 text-gray-800 dark:text-white">
    ${component.title || `Component ${index + 1}`}
  </h3>
  <p className="text-gray-600 dark:text-gray-300">
    Component type '${component.type}' not implemented yet
  </p>
</div>`;
    }
  }

  /**
   * Register default templates
   */
  private static registerDefaultTemplates() {
    const templates: WebAppTemplate[] = [
      {
        id: 'streamlit-dashboard',
        name: 'Streamlit Dashboard',
        description: 'Interactive dashboard with charts and metrics',
        framework: 'streamlit',
        category: 'dashboard',
        template: 'basic-dashboard',
        requiredData: ['numeric'],
        features: ['charts', 'metrics', 'filters', 'tables'],
        preview: 'Streamlit app with sidebar controls and interactive visualizations'
      },
      {
        id: 'html-report',
        name: 'HTML Report',
        description: 'Static HTML report with charts and tables',
        framework: 'html',
        category: 'report',
        template: 'report',
        requiredData: ['any'],
        features: ['charts', 'tables', 'styling'],
        preview: 'Professional HTML report with embedded visualizations'
      },
      {
        id: 'react-dashboard',
        name: 'React Dashboard',
        description: 'Interactive React dashboard with modern UI',
        framework: 'react',
        category: 'dashboard',
        template: 'dashboard',
        requiredData: ['json'],
        features: ['charts', 'components', 'state-management'],
        preview: 'Modern React dashboard with responsive design'
      },
      {
        id: 'nextjs-app',
        name: 'Next.js Application',
        description: 'Full-stack Next.js application with SSR',
        framework: 'nextjs',
        category: 'app',
        template: 'full-app',
        requiredData: ['json'],
        features: ['ssr', 'api-routes', 'optimized'],
        preview: 'Production-ready Next.js application with server-side rendering'
      }
    ];

    templates.forEach(template => {
      this.templates.set(template.id, template);
    });
  }

  /**
   * Get available templates
   */
  static getTemplates(framework?: string): WebAppTemplate[] {
    const allTemplates = Array.from(this.templates.values());
    return framework ? allTemplates.filter(t => t.framework === framework) : allTemplates;
  }

  /**
   * Helper methods
   */
  private static generateId(): string {
    return `webapp-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;
  }

  private static toPascalCase(str: string): string {
    return str.replace(/\w+/g, (w) => w[0].toUpperCase() + w.slice(1).toLowerCase()).replace(/\s/g, '');
  }

  private static getLanguageForFramework(framework: string): string {
    const languageMap: Record<string, string> = {
      'streamlit': 'python',
      'html': 'html',
      'react': 'jsx',
      'nextjs': 'jsx'
    };
    return languageMap[framework] || 'javascript';
  }

  private static getDependenciesForFramework(framework: string): string[] {
    const depMap: Record<string, string[]> = {
      'streamlit': ['streamlit', 'pandas', 'plotly', 'numpy'],
      'html': ['plotly.js', 'chart.js'],
      'react': ['react', 'recharts', 'styled-components'],
      'nextjs': ['next', 'react', 'tailwindcss', 'chart.js']
    };
    return depMap[framework] || [];
  }

  /**
   * Analyze data structure to determine optimal presentation layout
   */
  private static analyzeDataStructure(data: any): {
    isArray: boolean;
    itemCount: number;
    hasNestedObjects: boolean;
    commonFields: string[];
    dataType: 'users' | 'groups' | 'applications' | 'policies' | 'devices' | 'generic';
  } {
    const isArray = Array.isArray(data);
    const items = isArray ? data : [data];
    const itemCount = items.length;
    
    if (itemCount === 0) {
      return { isArray, itemCount, hasNestedObjects: false, commonFields: [], dataType: 'generic' };
    }

    // Get common fields across all items
    const allFields = items.map(item => typeof item === 'object' ? Object.keys(item) : []);
    const commonFields = allFields.length > 0 ? allFields.reduce((common, fields) =>
      common.filter(field => fields.includes(field))
    ) : [];

    // Check for nested objects
    const hasNestedObjects = items.some(item =>
      typeof item === 'object' && Object.values(item).some(value =>
        typeof value === 'object' && value !== null && !Array.isArray(value)
      )
    );

    // Detect Microsoft Graph data types
    let dataType: 'users' | 'groups' | 'applications' | 'policies' | 'devices' | 'generic' = 'generic';
    
    if (commonFields.includes('userPrincipalName') || commonFields.includes('mail')) {
      dataType = 'users';
    } else if (commonFields.includes('groupTypes') || (commonFields.includes('displayName') && commonFields.includes('members'))) {
      dataType = 'groups';
    } else if (commonFields.includes('appId') || commonFields.includes('applicationId')) {
      dataType = 'applications';
    } else if (commonFields.includes('conditions') || commonFields.includes('grantControls')) {
      dataType = 'policies';
    } else if (commonFields.includes('deviceId') || commonFields.includes('operatingSystem')) {
      dataType = 'devices';
    }

    return { isArray, itemCount, hasNestedObjects, commonFields, dataType };
  }

  /**
   * Generate intelligent HTML components based on data structure
   */
  private static generateIntelligentHTMLComponents(data: any, dataStructure: any): string {
    const { dataType, commonFields, itemCount, isArray } = dataStructure;
    
    let components = '';
    
    // Generate summary cards
    components += this.generateSummaryCards(data, dataStructure);
    
    // Generate main data display
    if (isArray && itemCount > 0) {
      components += `
        <div class="data-section">
          <div class="section-header">
            <h2>${this.getDataTypeTitle(dataType)} (${itemCount} items)</h2>
            <div class="search-controls">
              <input type="text" id="searchInput" placeholder="Search..." class="search-box">
              <select id="filterSelect" class="filter-select">
                <option value="">All items</option>
              </select>
            </div>
          </div>
          <div class="data-grid" id="dataGrid">
            <!-- Data cards will be generated by JavaScript -->
          </div>
        </div>`;
    } else {
      // Single item display
      components += `
        <div class="data-section">
          <div class="section-header">
            <h2>${this.getDataTypeTitle(dataType)} Details</h2>
          </div>
          <div class="single-item-card">
            <!-- Single item details will be generated by JavaScript -->
          </div>
        </div>`;
    }

    return components;
  }

  /**
   * Generate summary statistics cards
   */
  private static generateSummaryCards(data: any, dataStructure: any): string {
    const { dataType, itemCount, isArray } = dataStructure;
    
    if (!isArray || itemCount === 0) return '';

    let summaryCards = `<div class="summary-cards">`;
    
    // Total count card
    summaryCards += `
      <div class="summary-card">
        <div class="card-icon">📊</div>
        <div class="card-content">
          <div class="card-number">${itemCount}</div>
          <div class="card-label">Total ${this.getDataTypeTitle(dataType)}</div>
        </div>
      </div>`;

    // Data-specific summary cards based on type
    switch (dataType) {
      case 'users':
        const enabledUsers = data.filter((u: any) => u.accountEnabled !== false).length;
        summaryCards += `
          <div class="summary-card">
            <div class="card-icon">✅</div>
            <div class="card-content">
              <div class="card-number">${enabledUsers}</div>
              <div class="card-label">Active Users</div>
            </div>
          </div>`;
        break;
        
      case 'groups':
        const securityGroups = data.filter((g: any) => g.groupTypes && g.groupTypes.length === 0).length;
        summaryCards += `
          <div class="summary-card">
            <div class="card-icon">🔒</div>
            <div class="card-content">
              <div class="card-number">${securityGroups}</div>
              <div class="card-label">Security Groups</div>
            </div>
          </div>`;
        break;
        
      case 'policies':
        const enabledPolicies = data.filter((p: any) => p.state === 'enabled').length;
        summaryCards += `
          <div class="summary-card">
            <div class="card-icon">🛡️</div>
            <div class="card-content">
              <div class="card-number">${enabledPolicies}</div>
              <div class="card-label">Enabled Policies</div>
            </div>
          </div>`;
        break;
    }

    summaryCards += `</div>`;
    return summaryCards;
  }

  /**
   * Get display title for data type
   */
  private static getDataTypeTitle(dataType: string): string {
    const titles = {
      'users': 'Users',
      'groups': 'Groups', 
      'applications': 'Applications',
      'policies': 'Policies',
      'devices': 'Devices',
      'generic': 'Data'
    };
    return titles[dataType as keyof typeof titles] || 'Data';
  }

  /**
   * Generate JavaScript for interactive functionality
   */
  private static generateInteractiveJS(data: any, dataStructure: any): string {
    const { dataType, commonFields, isArray } = dataStructure;
    
    return `
      const data = ${JSON.stringify(data, null, 2)};
      const isArray = ${isArray};
      const dataType = '${dataType}';
      
      // Initialize the dashboard
      document.addEventListener('DOMContentLoaded', function() {
        if (isArray) {
          renderDataGrid(data);
          setupSearch();
          setupFilters(data);
        } else {
          renderSingleItem(data);
        }
      });
      
      // Render data grid with cards
      function renderDataGrid(items) {
        const grid = document.getElementById('dataGrid');
        if (!grid) return;
        
        grid.innerHTML = items.map(item => createDataCard(item)).join('');
      }
      
      // Create individual data card
      function createDataCard(item) {
        const displayName = item.displayName || item.name || item.userPrincipalName || item.id || 'Unnamed';
        const subtitle = getItemSubtitle(item);
        const status = getItemStatus(item);
        
        return \`
          <div class="data-card" data-item='\${JSON.stringify(item)}'>
            <div class="card-header">
              <div class="card-title">\${displayName}</div>
              <div class="card-status \${status.class}">\${status.text}</div>
            </div>
            <div class="card-subtitle">\${subtitle}</div>
            <div class="card-details">
              \${generateCardDetails(item)}
            </div>
            <div class="card-actions">
              <button onclick="showItemDetails(this)" class="btn-details">View Details</button>
            </div>
          </div>
        \`;
      }
      
      // Get appropriate subtitle for item
      function getItemSubtitle(item) {
        switch(dataType) {
          case 'users':
            return item.jobTitle || item.department || item.mail || '';
          case 'groups':
            return item.description || \`\${item.groupTypes?.join(', ') || 'Security Group'}\`;
          case 'applications':
            return item.publisherName || item.appId || '';
          case 'policies':
            return item.description || 'Conditional Access Policy';
          default:
            return item.description || item.type || '';
        }
      }
      
      // Get status indicator
      function getItemStatus(item) {
        switch(dataType) {
          case 'users':
            return item.accountEnabled === false ? 
              { class: 'status-disabled', text: 'Disabled' } : 
              { class: 'status-enabled', text: 'Active' };
          case 'policies':
            return item.state === 'enabled' ?
              { class: 'status-enabled', text: 'Enabled' } :
              { class: 'status-disabled', text: 'Disabled' };
          default:
            return { class: 'status-neutral', text: 'Active' };
        }
      }
      
      // Generate card details
      function generateCardDetails(item) {
        const importantFields = getImportantFields(dataType);
        return importantFields.map(field => {
          const value = item[field];
          if (value) {
            return \`<div class="detail-item"><span class="detail-label">\${field}:</span> <span class="detail-value">\${formatValue(value)}</span></div>\`;
          }
          return '';
        }).join('');
      }
      
      // Get important fields to display for each data type
      function getImportantFields(type) {
        switch(type) {
          case 'users':
            return ['mail', 'department', 'jobTitle', 'userType'];
          case 'groups':
            return ['mail', 'groupTypes', 'membershipRule'];
          case 'applications':
            return ['appId', 'publisherName', 'createdDateTime'];
          case 'policies':
            return ['state', 'createdDateTime', 'modifiedDateTime'];
          default:
            return Object.keys(data[0] || {}).slice(0, 4);
        }
      }
      
      // Format display values
      function formatValue(value) {
        if (Array.isArray(value)) {
          return value.join(', ');
        }
        if (typeof value === 'object' && value !== null) {
          return JSON.stringify(value, null, 2);
        }
        if (typeof value === 'string' && value.includes('T') && value.includes('Z')) {
          return new Date(value).toLocaleDateString();
        }
        return String(value);
      }
      
      // Setup search functionality
      function setupSearch() {
        const searchInput = document.getElementById('searchInput');
        if (searchInput) {
          searchInput.addEventListener('input', function() {
            const query = this.value.toLowerCase();
            const filteredData = data.filter(item => 
              JSON.stringify(item).toLowerCase().includes(query)
            );
            renderDataGrid(filteredData);
          });
        }
      }
      
      // Setup filters
      function setupFilters(items) {
        const filterSelect = document.getElementById('filterSelect');
        if (!filterSelect) return;
        
        // Add filter options based on data type
        const filterOptions = getFilterOptions(items);
        filterOptions.forEach(option => {
          const optionElement = document.createElement('option');
          optionElement.value = option.value;
          optionElement.textContent = option.text;
          filterSelect.appendChild(optionElement);
        });
        
        filterSelect.addEventListener('change', function() {
          const filterValue = this.value;
          if (!filterValue) {
            renderDataGrid(data);
            return;
          }
          
          const filteredData = data.filter(item => applyFilter(item, filterValue));
          renderDataGrid(filteredData);
        });
      }
      
      // Get filter options based on data type
      function getFilterOptions(items) {
        switch(dataType) {
          case 'users':
            return [
              { value: 'enabled', text: 'Active Users' },
              { value: 'disabled', text: 'Disabled Users' },
              { value: 'guest', text: 'Guest Users' }
            ];
          case 'policies':
            return [
              { value: 'enabled', text: 'Enabled Policies' },
              { value: 'disabled', text: 'Disabled Policies' }
            ];
          default:
            return [];
        }
      }
      
      // Apply filter logic
      function applyFilter(item, filterValue) {
        switch(dataType) {
          case 'users':
            if (filterValue === 'enabled') return item.accountEnabled !== false;
            if (filterValue === 'disabled') return item.accountEnabled === false;
            if (filterValue === 'guest') return item.userType === 'Guest';
            break;
          case 'policies':
            if (filterValue === 'enabled') return item.state === 'enabled';
            if (filterValue === 'disabled') return item.state !== 'enabled';
            break;
        }
        return true;
      }
      
      // Show detailed item view
      function showItemDetails(button) {
        const card = button.closest('.data-card');
        const itemData = JSON.parse(card.dataset.item);
        
        // Create modal or expand card with full details
        const modal = document.createElement('div');
        modal.className = 'detail-modal';
        modal.innerHTML = \`
          <div class="modal-content">
            <div class="modal-header">
              <h3>Item Details</h3>
              <button onclick="closeModal()" class="close-btn">&times;</button>
            </div>
            <div class="modal-body">
              <pre>\${JSON.stringify(itemData, null, 2)}</pre>
            </div>
          </div>
        \`;
        
        document.body.appendChild(modal);
        modal.addEventListener('click', function(e) {
          if (e.target === modal) closeModal();
        });
      }
      
      // Close modal
      function closeModal() {
        const modal = document.querySelector('.detail-modal');
        if (modal) modal.remove();
      }
      
      // Render single item
      function renderSingleItem(item) {
        const container = document.querySelector('.single-item-card');
        if (!container) return;
        
        container.innerHTML = \`
          <div class="single-item-details">
            <h3>\${item.displayName || item.name || 'Item Details'}</h3>
            <div class="details-grid">
              \${Object.entries(item).map(([key, value]) => \`
                <div class="detail-row">
                  <div class="detail-key">\${key}</div>
                  <div class="detail-value">\${formatValue(value)}</div>
                </div>
              \`).join('')}
            </div>
          </div>
        \`;
      }`;
  }
}

// Initialize templates when module loads
WebAppGenerator.initialize();